"use client";

import React, { useState } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    petName: '',
    petAge: '',
    petBreed: '',
    petLocation: '',
    petGender: '',
    petHobbies: '',
  });
  const [petImage, setPetImage] = useState<string>('');
  const [imagePreview, setImagePreview] = useState<string>('');
  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const { login, isLoading, error } = useAuth();
  const router = useRouter();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // In a real app, you would upload this to a server
      // For now, we'll create a local URL for preview
      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setImagePreview(result);
        setPetImage(result);
      };
      reader.readAsDataURL(file);
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.username.trim()) {
      newErrors.username = 'Username is required';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    if (!formData.password.trim()) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters';
    }

    if (!formData.petName.trim()) {
      newErrors.petName = 'Pet name is required';
    }

    if (!formData.petAge.trim()) {
      newErrors.petAge = 'Pet age is required';
    } else if (isNaN(Number(formData.petAge)) || Number(formData.petAge) <= 0) {
      newErrors.petAge = 'Please enter a valid age';
    }

    if (!formData.petBreed.trim()) {
      newErrors.petBreed = 'Pet breed is required';
    }

    if (!formData.petLocation.trim()) {
      newErrors.petLocation = 'Location is required';
    }

    if (!formData.petGender) {
      newErrors.petGender = 'Pet gender is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      const userData = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        petName: formData.petName,
        petAge: Number(formData.petAge),
        petBreed: formData.petBreed,
        petLocation: formData.petLocation,
        petGender: formData.petGender,
        petHobbies: formData.petHobbies.split(',').map(h => h.trim()).filter(h => h),
        petImage: petImage || `https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/03c6ccdb-503a-46e8-871a-f403c781cb75.png + '+' + formData.petBreed)}`
      };

      await login(userData);
      router.push('/swipe');
    } catch (err) {
      console.error('Registration failed:', err);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-pink-50 to-purple-50 p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-bold text-gray-900">Join Pet Tinder</CardTitle>
          <CardDescription className="text-gray-600">
            Create a profile for your furry friend
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="username">Username</Label>
                <Input
                  id="username"
                  name="username"
                  type="text"
                  value={formData.username}
                  onChange={handleInputChange}
                  placeholder="Your username"
                  className={errors.username ? 'border-red-500' : ''}
                />
                {errors.username && (
                  <p className="text-sm text-red-500">{errors.username}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  placeholder="your@email.com"
                  className={errors.email ? 'border-red-500' : ''}
                />
                {errors.email && (
                  <p className="text-sm text-red-500">{errors.email}</p>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="petImage">Pet Photo</Label>
              <Input
                id="petImage"
                name="petImage"
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-pink-50 file:text-pink-700 hover:file:bg-pink-100"
              />
              {imagePreview && (
                <div className="mt-2">
                  <img
                    src={imagePreview}
                    alt="Pet preview"
                    className="w-32 h-32 object-cover rounded-lg border-2 border-gray-200"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.src = `https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/b16d6b07-7ccd-4c12-843d-3fb30255950f.png`;
                    }}
                  />
                </div>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="petName">Pet Name</Label>
                <Input
                  id="petName"
                  name="petName"
                  type="text"
                  value={formData.petName}
                  onChange={handleInputChange}
                  placeholder="Buddy, Luna, etc."
                  className={errors.petName ? 'border-red-500' : ''}
                />
                {errors.petName && (
                  <p className="text-sm text-red-500">{errors.petName}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="petAge">Pet Age</Label>
                <Input
                  id="petAge"
                  name="petAge"
                  type="number"
                  value={formData.petAge}
                  onChange={handleInputChange}
                  placeholder="Age in years"
                  className={errors.petAge ? 'border-red-500' : ''}
                />
                {errors.petAge && (
                  <p className="text-sm text-red-500">{errors.petAge}</p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="petBreed">Breed</Label>
                <Input
                  id="petBreed"
                  name="petBreed"
                  type="text"
                  value={formData.petBreed}
                  onChange={handleInputChange}
                  placeholder="Golden Retriever, Persian, etc."
                  className={errors.petBreed ? 'border-red-500' : ''}
                />
                {errors.petBreed && (
                  <p className="text-sm text-red-500">{errors.petBreed}</p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="petGender">Gender</Label>
                <Select onValueChange={(value) => handleSelectChange('petGender', value)}>
                  <SelectTrigger className={errors.petGender ? 'border-red-500' : ''}>
                    <SelectValue placeholder="Select gender" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="male">Male</SelectItem>
                    <SelectItem value="female">Female</SelectItem>
                  </SelectContent>
                </Select>
                {errors.petGender && (
                  <p className="text-sm text-red-500">{errors.petGender}</p>
                )}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="petLocation">Location</Label>
              <Input
                id="petLocation"
                name="petLocation"
                type="text"
                value={formData.petLocation}
                onChange={handleInputChange}
                placeholder="City, State"
                className={errors.petLocation ? 'border-red-500' : ''}
              />
              {errors.petLocation && (
                <p className="text-sm text-red-500">{errors.petLocation}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="petHobbies">Hobbies (comma-separated)</Label>
              <Input
                id="petHobbies"
                name="petHobbies"
                type="text"
                value={formData.petHobbies}
                onChange={handleInputChange}
                placeholder="Playing fetch, sleeping, treats, walks"
              />
            </div>

            {error && (
              <div className="p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md">
                {error}
              </div>
            )}

            <Button 
              type="submit" 
              className="w-full bg-pink-600 hover:bg-pink-700"
              disabled={isLoading}
            >
              {isLoading ? 'Creating Profile...' : 'Create Profile'}
            </Button>
          </form>

          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600">
              Already have an account?{' '}
              <Link href="/login" className="text-pink-600 hover:text-pink-700 font-medium">
                Sign in here
              </Link>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
